这段代码是一个用于控制机械臂的Lua脚本。它使用了一个名为cmd的库来发送和接收命令，以及一个名为mc的库来获取和设置机械臂的状态。下面是逐行解释：
-- Nicolas Alt, 2014-09-04
-- Cheng Chi, 2023-07-27
-- Command-and-measure script
-- Tests showed about 30Hz rate
require "socket"
cmd.register(0xB0); -- Measure only
cmd.register(0xB1); -- Position PD
这些是注释，说明脚本的作者和日期。require "socket"用于加载Lua的socket库。cmd.register(0xB0)和cmd.register(0xB1)注册了两个命令，分别是仅测量和位置PD控制。


辅助函数，用于检查数字x的第p位是否为1
function hasbit(x, p)
  return x % (p + p) >= p       
end

send_state函数获取机械臂的状态、位置、速度、力和时间，并使用cmd.send发送这些信息。只有状态的最低字节被发送
function send_state()
    -- ==== Get measurements ====
    state = gripper.state();
    pos = mc.position();
    speed = mc.speed();
    force = mc.aforce();
    time = socket.gettime();
    if cmd.online() then
        -- Only the lowest byte of state is sent!
        cmd.send(id, etob(E_SUCCESS), state % 256, ntob(pos), ntob(speed), ntob(force), ntob(time));
    end
end

process函数读取命令，如果是位置PD控制命令（id == 0xB1），则解析命令参数，获取当前状态，计算控制量，设置速度，并根据机械臂是否受阻设置力限制。然后发送当前状态
function process()
    id, payload = cmd.read();
    -- Position control
    if id == 0xB1 then
        -- get args
        cmd_pos = bton({payload[2],payload[3],payload[4],payload[5]});
        cmd_vel = bton({payload[6],payload[7],payload[8],payload[9]});
        cmd_kp = bton({payload[10],payload[11],payload[12],payload[13]});
        cmd_kd = bton({payload[14],payload[15],payload[16],payload[17]});
        cmd_travel_force_limit = bton({payload[18],payload[19],payload[20],payload[21]});
        cmd_blocked_force_limit = bton({payload[22],payload[23],payload[24],payload[25]});
        -- get state
        pos = mc.position();
        vel = mc.speed();
        -- pd controller
        e = cmd_pos - pos;
        de = cmd_vel - vel;
        act_vel = cmd_kp * e + cmd_kd * de;
        -- command
        mc.speed(act_vel);
        -- force limit
        if mc.blocked() then
            mc.force(cmd_blocked_force_limit);
        else
            mc.force(cmd_travel_force_limit);
        end
    end
    --t_start = socket.gettime();
    send_state();
    --print(socket.gettime() - t_start);
end

这是一个无限循环，如果命令在线（即连接到控制器），则尝试处理命令。如果处理过程中出现错误，则打印错误信息并休眠100毫秒。如果命令不在线，也休眠100毫秒
while true do
    if cmd.online() then
        -- process()
        if not pcall(process) then
            print("Error occured")
            sleep(100)
        end
    else
        sleep(100)
    end
end
