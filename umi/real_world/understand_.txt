uvc_camera

这段代码定义了一个名为 `UvcCamera` 的类，该类继承自 `multiprocessing.Process`，用于控制摄像头和视频录制。这个类提供了多种功能，包括初始化、启动、停止摄像头和视频录制，以及与共享内存队列和环形缓冲区交互的能力。
以下是 `UvcCamera` 类的主要功能和属性：
1. **初始化**:
   - 接受多个参数，包括 `shm_manager`（共享内存管理器）、`dev_video_path`（视频设备文件路径）、`resolution`（视频分辨率）、`capture_fps`（捕获帧率）、`put_fps`（输出帧率）、`put_downsample`（是否下采样输出）、`get_max_k`（获取最大帧数）、`receive_latency`（接收延迟）、`cap_buffer_size`（捕获缓冲区大小）、`num_threads`（线程数量）、`transform`（数据转换函数）、`vis_transform`（可视化转换函数）、`recording_transform`（录制转换函数）、`video_recorder`（视频记录器）、`verbose`（是否输出详细日志）。
   - 创建共享内存队列和环形缓冲区，用于存储和获取摄像头数据。
   - 创建命令队列，用于接收和执行控制命令。
   - 创建视频记录器，用于录制视频。
2. **上下文管理器**:
   - 使用 `__enter__` 和 `__exit__` 方法，使得 `UvcCamera` 类可以作为一个上下文管理器使用。当进入上下文时，会启动摄像头和视频录制；当退出上下文时，会停止摄像头和视频录制。
3. **用户API**:
   - `start`: 启动摄像头和视频录制。
   - `stop`: 停止摄像头和视频录制。
   - `start_wait`: 等待摄像头和视频录制器启动。
   - `end_wait`: 等待摄像头和视频录制器停止。
   - `is_ready`: 检查摄像头是否准备好。
   - `get`: 从共享内存环形缓冲区获取数据。
   - `get_vis`: 从共享内存环形缓冲区获取可视化数据。
   - `start_recording`: 开始录制视频。
   - `stop_recording`: 停止录制视频。
   - `restart_put`: 重启数据输出。
4. **间隔API**:
   - `run`: 定义了 `Process` 类的 `run` 方法，这是多进程类的主方法，用于执行摄像头和视频录制的具体逻辑。
    多进程类的主方法，用于执行摄像头和视频录制的具体逻辑。代码首先限制了线程数量，然后打开摄像头，并设置其分辨率和帧率。接着，代码进入一个无限循环，用于捕获和处理每一帧
    在多线程环境中捕获和处理摄像头数据，并将数据写入共享内存，同时执行视频录制。它还处理来自命令队列的控制命令，并根据需要调整数据处理和视频录制的行为
    主要步骤如下：
        摄像头捕获:
            使用 cv2.VideoCapture 打开摄像头。
            设置摄像头分辨率和帧率。
        数据处理:
            直接将捕获的帧写入共享内存，以避免复制。
            应用数据转换（如果提供了转换函数）。
            进行数据输出频率控制，包括下采样。
        视频录制:
            如果视频记录器准备好，则写入帧。
        命令处理:
            从命令队列中获取并执行命令。
        性能监控:
            打印帧率信息。
        循环:
            循环直到接收到停止事件。
        异常处理:
            在循环结束时，停止视频记录器。
            释放摄像头资源。
5. **共享变量**:
   - 类中包含了一些共享变量，如 `stop_event`（停止事件）、`ready_event`（准备事件）、`ring_buffer`（共享内存环形缓冲区）、`vis_ring_buffer`（共享内存环形缓冲区）和 `command_queue`（命令队列）。
这个类的主要目的是提供一个多进程框架，用于控制摄像头和视频录制，并能够与共享内存和其他进程通信。
