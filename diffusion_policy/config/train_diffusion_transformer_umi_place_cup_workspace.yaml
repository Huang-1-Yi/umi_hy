defaults:
  - _self_
  - task: umi

name: train_diffusion_transformer_timm
_target_: diffusion_policy.workspace.train_diffusion_transformer_timm_workspace.TrainDiffusionTransformerTimmWorkspace

task_name: ${task.name}
shape_meta: ${task.shape_meta}
exp_name: "default"

n_action_steps: 8
n_emb: 768      # transformer

policy:
  _target_: diffusion_policy.policy.diffusion_transformer_timm_policy.DiffusionTransformerTimmPolicy

  shape_meta: ${shape_meta}
  
  noise_scheduler:
    _target_: diffusers.DDIMScheduler # 指定噪声调度器的执行目标，这里使用的是 DDIM 调度器
    num_train_timesteps: 50           # 指定训练过程中总的时步数
    beta_start: 0.0001                # 指定噪声的初始值
    beta_end: 0.02                    # 指定噪声的最终值
    # beta_schedule is important
    # this is the best we found
    beta_schedule: squaredcos_cap_v2        # 指定噪声调度器的类型，squaredcos_cap_v2 类型
    clip_sample: True           # 指定是否对采样进行裁剪
    set_alpha_to_one: True      # 指定是否将 alpha 设置为 1
    steps_offset: 0             # 指定时步的偏移量
    prediction_type: epsilon    # or sample  # 指定预测类型，这里使用的是 epsilon

  obs_encoder:
    _target_: diffusion_policy.model.vision.transformer_obs_encoder.TransformerObsEncoder
    # 指定观测编码器的执行目标，transformer 观测编码器
    shape_meta: ${shape_meta}
    global_pool: ''                     # 指定全局池化的类型，这里使用的是空字符串，可能意味着不使用全局池化
    n_emb: ${n_emb}

    ##### from scratch #####
    # model_name: 'vit_base_patch16_224'
    # model_name: 'resnet34'
    # model_name: 'vit_tiny_patch16_224'
    # model_name: 'efficientnet_b0'
    # model_name: 'efficientnet_b3'
    # pretrained: False
    # frozen: False

    ##### from scratch #####
    # model_name: 'resnet34.a1_in1k'
    model_name: 'vit_base_patch16_clip_224.openai'
    # model_name: 'convnext_base.clip_laion2b_augreg_ft_in12k'
    pretrained: True  # 指定是否使用预训练的模型
    frozen: False     # 指定是否冻结模型参数

    # 'cls' or 'avg' or 'max' or 'soft_attention' or 'spatial_embedding' or 'transformer' or 'attention_pool_2d'
    feature_aggregation: null     # 这个是transformer？为什么是null

    # it only works for resnet. 32 (7x7) or 16 (14x14)
    downsample_ratio: 32  # 指定下采样的比例

    transforms:
      - type: RandomCrop
        ratio: 0.95
      - _target_: torchvision.transforms.RandomRotation # 随机旋转输入图像
        degrees:
          - -5.0
          - 5.0
        expand: false
      - _target_: torchvision.transforms.ColorJitter    # 随机调整输入图像的亮度、对比度、饱和度和色调
        brightness: 0.3
        contrast: 0.4
        saturation: 0.5
        hue: 0.08
      # - _target_: torchvision.transforms.RandomPerspective
      #   distortion_scale: 0.5
      #   p: 1.0
      # - _target_: torchvision.transforms.ElasticTransform
      #   alpha: 50.0
      #   sigma: 5.0
      # - _target_: torchvision.transforms.RandomPerspective
      #   distortion_scale: 0.5
      #   p: 1.0
      # - _target_: torchvision.transforms.ElasticTransform
      #   alpha: 50.0
      #   sigma: 5.0
      # - _target_: torchvision.transforms.RandomCrop
      #   size: 192
      

    use_group_norm: True    # 指定是否使用组归一化
    share_rgb_model: False  # 指定是否共享 RGB 模型
    # imagenet_norm: True     # 指定是否使用 ImageNet 归一化

  num_inference_steps: 16
  input_pertub: 0.1 # reference: https://github.com/forever208/DDPM-IP
  n_layer: 7
  n_head: 8
  n_emb: ${n_emb}
  p_drop_attn: 0.1
  

ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 64
  num_workers: 32
  shuffle: True
  pin_memory: True
  persistent_workers: True

val_dataloader:
  batch_size: 64
  num_workers: 32
  shuffle: False
  pin_memory: True
  persistent_workers: True

optimizer:
  lr: 3.0e-4
  weight_decay: 1.0e-6
  obs_encoder_lr: 3.0e-5  # 特有
  obs_encoder_weight_decay: 1.0e-6 # 特有
  betas: [0.95, 0.999] # 特有
  
training:
  device: "cuda:0"
  seed: 42
  debug: False
  resume: False # 是否从之前的点训练
  # optimization
  lr_scheduler: cosine
  lr_warmup_steps: 2000
  num_epochs: 300
  gradient_accumulate_every: 1
  # EMA destroys performance when used with BatchNorm
  # replace BatchNorm with GroupNorm.
  use_ema: True
  freeze_encoder: False
  # training loop control
  # in epochs
  rollout_every: 10
  checkpoint_every: 10
  val_every: 1
  sample_every: 5
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0

logging:
  project: umi
  resume: False
  mode: online
  name: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}
  tags: ["${name}", "${task_name}", "${exp_name}"]
  id: null
  group: null

checkpoint:
  topk:
    monitor_key: train_loss
    mode: min
    k: 20
    format_str: 'epoch={epoch:04d}-train_loss={train_loss:.3f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}
