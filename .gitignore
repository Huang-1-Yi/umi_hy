.vscode
example_demo_session
data
data_local
data_workspace
outputs
wandb
**/.DS_Store
*.lprof

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# add diffusion_policy/env/
!diffusion_policy/env/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/
# ckpt
# pretrained_model
# test_script
# test


# 1. 明确不需要跟踪的部分
# 规则/目录	原因
# .vscode/	IDE 配置（通常含本地环境设置），建议每个开发者自行配置，不跟踪
# example_demo_session	示例或临时演示文件，不跟踪（除非是项目核心文件）
# data/, data_local/	原始数据或本地数据，通常体积大或含敏感信息，不跟踪
# data_workspace/	临时工作数据，不跟踪
# outputs/	程序生成的输出文件（如日志、模型等），不跟踪
# wandb/	WandB 实验日志，不跟踪（通过云端同步实验记录）
# **/.DS_Store	macOS 系统文件，不跟踪
# *.lprof	Python 性能分析文件，不跟踪
# __pycache__/	Python 字节码缓存，不跟踪
# *.py[cod], *$py.class	Python 编译文件，不跟踪
# *.so	C 扩展模块，需通过源码编译，不跟踪
# .Python, build/	Python 虚拟环境和构建产物，不跟踪
# dist/, *.egg-info/	打包生成的发行文件，不跟踪
# *.spec	PyInstaller 生成文件，不跟踪
# htmlcov/, .coverage	测试覆盖率报告，不跟踪（可通过 CI 生成）
# .env, .venv/	虚拟环境和环境变量文件，不跟踪（但可提交 .env.example 模板）
# .idea/, .spyderproject	IDE 配置文件，不跟踪
# .mypy_cache/	类型检查缓存，不跟踪
# *.ckpt, pretrained_model	模型权重文件（通常体积大），不跟踪（可通过其他方式共享）
# 2. 需要谨慎处理的部分
# 规则/目录	建议
# !diffusion_policy/env/	例外规则需确认：
# - 若 env/ 是虚拟环境目录，应删除此例外（不跟踪）
# - 若包含配置文件（如初始化脚本），则需明确跟踪具体文件
# Pipfile.lock	注释中建议根据项目类型决定：
# - 应用项目：跟踪（确保依赖版本固定）
# - 库项目：不跟踪
# poetry.lock	类似 Pipfile.lock，根据项目类型决定是否跟踪
# db.sqlite3	数据库文件，不跟踪（可提交 schema.sql 或迁移脚本）
# local_settings.py	本地开发配置，不跟踪（提交 settings.example.py）
# 3. 需要跟踪的部分
# 文件/目录	原因
# .gitignore	必须跟踪，确保所有开发者使用相同的忽略规则
# requirements.txt	Python 依赖清单，必须跟踪
# README.md	项目文档，必须跟踪
# 源代码（.py 文件）	项目核心代码，必须跟踪
# 配置文件模板	如 .env.example, config.yaml.example，需跟踪
# 测试文件	单元测试或集成测试代码，需跟踪
# 脚本工具	如 scripts/ 目录下的部署/构建脚本，需跟踪
